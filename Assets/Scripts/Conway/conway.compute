// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Update
#pragma kernel Init
#pragma kernel Random

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
sampler2D Input;
RWTexture2D<float4> OutputConway;
int width;
int height;

float4 mousePosition;
int brushShape[100];
int brushMax;
int brushArrSize;
bool mouseDown;

float time;
bool draw;
bool play;

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float ScaledHash(uint hash)
{
    return  float(hash) / 4294967295.0; // 2^32-1
}

// Boundary check
bool BoundCheck(int2 xy)
{
    if (xy.x >= 0 && xy.x < width && xy.y >= 0 && xy.y < height) {
        return true;
    }
    else {
        return false;
    }
}

// 1D array index to 2D array indices, arr_shape defines the row length
int2 IndexTransform(int i, int arr_shape)
{
    uint x = uint(i) % uint(arr_shape);
    uint y = uint(i) / uint(arr_shape);

    return int2(x, y);
}

[numthreads(8, 8, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    // Init blank background to draw on
    Conway[id.xy] = float4(0, 0, 0, 0);
}

[numthreads(8,8,1)]
void Random (uint3 id : SV_DispatchThreadID)
{
    // Init random background
    float rand = ScaledHash(Hash(id.y * width + id.x + Hash(id.x * time)));
    if (rand > 0.5) {
        Conway[id.xy] = float4(1, 1, 1, 1);
    }
    else {
        Conway[id.xy] = float4(0, 0, 0, 0);
    }
    
}

[numthreads(8,8,1)]
void Update(uint3 id : SV_DispatchThreadID) 
{
    if (draw && mouseDown) {
        float2 mousePos = mousePosition.xy;
        
        if (length(id.xy - mousePos) < 1) {
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++){
                    int idx = i + (j*10);
                    if (brushShape[idx] == 1){
                        Conway[int2(id.x + i, id.y + j)] = float4(1,1,1,1);
                    }
                }
            }
        }
    }
    else if (!draw) {
        // Get current state
        float4 originalValue = Conway[id.xy];
        // Simulate evolution using a 3x3 block around each pixel
        float4 sum = 0;
        for (int x = -1; x <= 1; x++) {
            for (int y = -1; y <= 1; y++) {
                int sampX = id.x + x;
                int sampY = id.y + y;

                // Constrain within texture boundaries 
                if (BoundCheck(int2(sampX, sampY))) {
                    sum += Conway[int2(sampX, sampY)];
                }
            }
        }

        // Normalise valaue to remove central pixel 
        sum = sum - originalValue;

        if (originalValue.x == 0 && sum.x == 3) {
            // Bring to life, if dead with 3 neighbours
            Conway[id.xy] = float4(1, 1, 1, 1);
        }
        else if (originalValue.x == 1 && sum.x < 2) {
            // Kill, if alive with < 2 neighbours
            Conway[id.xy] = float4(0, 0, 0, 0);
        }
        else if (originalValue.x == 1 && sum.x > 3) {
            // Kill, if alive with > 3 neighbours
            Conway[id.xy] = float4(0, 0, 0, 0);
        }

    }
}
